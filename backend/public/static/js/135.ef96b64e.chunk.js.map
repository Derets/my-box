{"version":3,"file":"static/js/135.ef96b64e.chunk.js","mappings":"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","sources":["components/3dModels/Casketbox.js","components/3dModels/SelectModel.module.css","components/3dModels/Cubebox.js","components/3dModels/Sliderbox.js","components/3dModels/SelectModel.js"],"sourcesContent":["import { useFrame } from \"@react-three/fiber\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport gsap from \"gsap\";\r\n\r\nconst Casketbox = (props) => {\r\n  const TopRef = useRef();\r\n  const [isClicked, setIsClicked] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const clickHandler = () => {\r\n    if (!isClicked) {\r\n      setIsClicked(true);\r\n      isOpen ? setIsOpen(false) : setIsOpen(true);\r\n      setTimeout(() => {\r\n        setIsClicked(false);\r\n      }, 100);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsOpen(false);\r\n  }, [props.length, props.height, props.width]);\r\n\r\n  const animationDuration = 0.25;\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      gsap.to(TopRef.current.position, {\r\n        x: position2[0],\r\n        y: position2[1],\r\n        z: position2[2],\r\n        duration: animationDuration / 2,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef.current.rotation, {\r\n        x: rotation2[0],\r\n        y: rotation2[1],\r\n        z: rotation2[2],\r\n        duration: animationDuration / 2,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef.current.position, {\r\n        x: positionEnd[0],\r\n        y: positionEnd[1],\r\n        z: positionEnd[2],\r\n        duration: animationDuration / 2,\r\n        delay: animationDuration / 2,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef.current.rotation, {\r\n        x: rotationEnd[0],\r\n        y: rotationEnd[1],\r\n        z: rotationEnd[2],\r\n        duration: animationDuration / 2,\r\n        delay: animationDuration / 2,\r\n        ease: \"none\",\r\n      });\r\n    } else {\r\n      gsap.to(TopRef.current.position, {\r\n        x: position2[0],\r\n        y: position2[1],\r\n        z: position2[2],\r\n        duration: animationDuration / 2,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef.current.rotation, {\r\n        x: rotation2[0],\r\n        y: rotation2[1],\r\n        z: rotation2[2],\r\n        duration: animationDuration / 2,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef.current.position, {\r\n        x: position[0],\r\n        y: position[1],\r\n        z: position[2],\r\n        duration: animationDuration / 2,\r\n        delay: animationDuration / 2,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef.current.rotation, {\r\n        x: rotation[0],\r\n        y: rotation[1],\r\n        z: rotation[2],\r\n        duration: animationDuration / 2,\r\n        delay: animationDuration / 2,\r\n        ease: \"none\",\r\n      });\r\n    }\r\n  }, [isOpen]);\r\n\r\n  useFrame(() => {});\r\n\r\n  let colorOne = props.colorOne || \"#333\";\r\n  let colorTwo = props.colorTwo || \"#b3b3b3\";\r\n  let colorThree = props.colorThree || \"#999\";\r\n  let lengthOfBox = props.width || 3;\r\n  let heightOfBox = props.height || 2;\r\n  let widthOfBox = props.length || 3;\r\n  const basicThickness = widthOfBox ? widthOfBox / 60 : 0.05;\r\n  const ThinThickness = basicThickness * 4;\r\n  let position = [0, 0, 0];\r\n  let position2 = [\r\n    -(widthOfBox / 2 - ThinThickness / 2) + widthOfBox / 2,\r\n    heightOfBox + ThinThickness + widthOfBox / 4,\r\n    0,\r\n  ];\r\n  let positionEnd = [-widthOfBox, heightOfBox + ThinThickness, 0];\r\n  let rotation = [0, 0, 0];\r\n  let rotation2 = [0, 0, 90 * (Math.PI / 180)];\r\n  let rotationEnd = [0, 0, 180 * (Math.PI / 180)];\r\n\r\n  return (\r\n    <group onClick={clickHandler}>\r\n      {/* Top */}\r\n      <group ref={TopRef}>\r\n        <mesh\r\n          rotation={[0, 0, 0]}\r\n          position={[0, heightOfBox / 2 + ThinThickness / 2, 0]}\r\n        >\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[widthOfBox, ThinThickness, lengthOfBox]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n        </mesh>\r\n\r\n        <mesh\r\n          rotation={[0, 0, 0]}\r\n          position={[widthOfBox / 2, heightOfBox / 2 + ThinThickness, 0]}\r\n        >\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[widthOfBox / 10, basicThickness / 10, lengthOfBox / 10]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorThree} />\r\n        </mesh>\r\n      </group>\r\n\r\n      {/* Bottom */}\r\n      <mesh\r\n        rotation={[0, 0, 0]}\r\n        position={[0, -heightOfBox / 2 + ThinThickness / 2, 0]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, ThinThickness, lengthOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n      </mesh>\r\n\r\n      {/* Side */}\r\n      <mesh\r\n        rotation={[0, 0, Math.PI / 2]}\r\n        position={[widthOfBox / 2 - ThinThickness / 2, 0, 0]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[heightOfBox, ThinThickness, lengthOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[0, 0, Math.PI / 2]}\r\n        position={[-(widthOfBox / 2 - ThinThickness / 2), 0, 0]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[heightOfBox, ThinThickness, lengthOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        position={[0, 0, -(lengthOfBox / 2 - ThinThickness / 2)]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, ThinThickness, heightOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        position={[0, 0, lengthOfBox / 2 - ThinThickness / 2]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, ThinThickness, heightOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n      </mesh>\r\n      {/* Outside */}\r\n      <mesh\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        position={[0, ThinThickness / 2, lengthOfBox / 2 + basicThickness / 2]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, basicThickness, heightOfBox + ThinThickness]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorOne} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        position={[\r\n          0,\r\n          ThinThickness / 2,\r\n          -(lengthOfBox / 2 + basicThickness / 2),\r\n        ]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, basicThickness, heightOfBox + ThinThickness]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorOne} />\r\n      </mesh>\r\n\r\n      {/* Inside */}\r\n\r\n      <mesh\r\n        rotation={[0, 0, Math.PI / 2]}\r\n        position={[\r\n          widthOfBox / 2 - ThinThickness,\r\n          -heightOfBox / 4 + ThinThickness + basicThickness / 10,\r\n          0,\r\n        ]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[\r\n            heightOfBox / 2,\r\n            basicThickness / 10,\r\n            lengthOfBox - ThinThickness * 2,\r\n          ]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorThree} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[0, 0, Math.PI / 2]}\r\n        position={[\r\n          -(widthOfBox / 2 - ThinThickness),\r\n          -heightOfBox / 4 + ThinThickness + basicThickness / 10,\r\n          0,\r\n        ]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[\r\n            heightOfBox / 2,\r\n            basicThickness / 10,\r\n            lengthOfBox - ThinThickness * 2,\r\n          ]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorThree} />\r\n      </mesh>\r\n\r\n      <mesh\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        position={[\r\n          0,\r\n          -heightOfBox / 4 + ThinThickness + basicThickness / 10,\r\n          -(lengthOfBox / 2 - ThinThickness),\r\n        ]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[\r\n            widthOfBox - ThinThickness * 2,\r\n            basicThickness / 10,\r\n            heightOfBox / 2,\r\n          ]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorThree} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        position={[\r\n          0,\r\n          -heightOfBox / 4 + ThinThickness + basicThickness / 10,\r\n          lengthOfBox / 2 - ThinThickness,\r\n        ]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[\r\n            widthOfBox - ThinThickness * 2,\r\n            basicThickness / 10,\r\n            heightOfBox / 2,\r\n          ]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorThree} />\r\n      </mesh>\r\n      {/* Inside bottom */}\r\n      <mesh\r\n        rotation={[0, 0, 0]}\r\n        position={[\r\n          0,\r\n          -heightOfBox / 2 + ThinThickness + basicThickness / 20,\r\n          0,\r\n        ]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[\r\n            widthOfBox - ThinThickness * 2,\r\n            basicThickness / 10,\r\n            lengthOfBox - ThinThickness * 2,\r\n          ]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorThree} />\r\n      </mesh>\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default Casketbox;\r\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useEffect, useRef, useState } from \"react\";\r\nimport gsap from \"gsap\";\r\n\r\nconst Cubebox = (props) => {\r\n  const TopRef1 = useRef();\r\n  const TopRef2 = useRef();\r\n  const [isClicked, setIsClicked] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const clickHandler = () => {\r\n    if (!isClicked) {\r\n      setIsClicked(true);\r\n      isOpen ? setIsOpen(false) : setIsOpen(true);\r\n      setTimeout(() => {\r\n        setIsClicked(false);\r\n      }, 100);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsOpen(false);\r\n  }, [props.length, props.height, props.width]);\r\n\r\n  const animationDuration = 0.5;\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      gsap.to(TopRef1.current.position, {\r\n        x: positionTop2[0],\r\n        y: positionTop2[1],\r\n        z: positionTop2[2],\r\n        duration: animationDuration / 4,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef1.current.rotation, {\r\n        x: rotation2[0],\r\n        y: rotation2[1],\r\n        z: rotation2[2],\r\n        duration: animationDuration / 4,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef1.current.position, {\r\n        x: positionTopEnd[0],\r\n        y: positionTopEnd[1],\r\n        z: positionTopEnd[2],\r\n        duration: animationDuration / 4,\r\n        delay: animationDuration * 0.25,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef1.current.rotation, {\r\n        x: rotationOpened[0],\r\n        y: rotationOpened[1],\r\n        z: rotationOpened[2],\r\n        duration: animationDuration / 4,\r\n        delay: animationDuration * 0.25,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef2.current.position, {\r\n        x: positionBottom2[0],\r\n        y: positionBottom2[1],\r\n        z: positionBottom2[2],\r\n        duration: animationDuration / 4,\r\n        delay: animationDuration / 2,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef2.current.rotation, {\r\n        x: rotationBottom2[0],\r\n        y: rotationBottom2[1],\r\n        z: rotationBottom2[2],\r\n        duration: animationDuration / 4,\r\n        delay: animationDuration / 2,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef2.current.position, {\r\n        x: positionBottomStart[0],\r\n        y: positionBottomStart[1],\r\n        z: positionBottomStart[2],\r\n        duration: animationDuration / 4,\r\n        delay: animationDuration * 0.75,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef2.current.rotation, {\r\n        x: rotationOpenedBottom[0],\r\n        y: rotationOpenedBottom[1],\r\n        z: rotationOpenedBottom[2],\r\n        duration: animationDuration / 4,\r\n        delay: animationDuration * 0.75,\r\n        ease: \"none\",\r\n      });\r\n    } else {\r\n      gsap.to(TopRef2.current.position, {\r\n        x: positionBottom2[0],\r\n        y: positionBottom2[1],\r\n        z: positionBottom2[2],\r\n        duration: animationDuration / 4,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef2.current.rotation, {\r\n        x: rotationBottom2[0],\r\n        y: rotationBottom2[1],\r\n        z: rotationBottom2[2],\r\n        duration: animationDuration / 4,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef2.current.position, {\r\n        x: positionBottomEnd[0],\r\n        y: positionBottomEnd[1],\r\n        z: positionBottomEnd[2],\r\n        duration: animationDuration / 4,\r\n        delay: animationDuration * 0.25,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef2.current.rotation, {\r\n        x: rotationClosed[0],\r\n        y: rotationClosed[1],\r\n        z: rotationClosed[2],\r\n        duration: animationDuration / 4,\r\n        delay: animationDuration * 0.25,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef1.current.position, {\r\n        x: positionTop2[0],\r\n        y: positionTop2[1],\r\n        z: positionTop2[2],\r\n        duration: animationDuration / 4,\r\n        delay: animationDuration * 0.5,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef1.current.rotation, {\r\n        x: rotation2[0],\r\n        y: rotation2[1],\r\n        z: rotation2[2],\r\n        duration: animationDuration / 4,\r\n        delay: animationDuration * 0.5,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef1.current.position, {\r\n        x: positionTopStart[0],\r\n        y: positionTopStart[1],\r\n        z: positionTopStart[2],\r\n        duration: animationDuration / 4,\r\n        delay: animationDuration * 0.75,\r\n        ease: \"none\",\r\n      });\r\n      gsap.to(TopRef1.current.rotation, {\r\n        x: rotationClosed[0],\r\n        y: rotationClosed[1],\r\n        z: rotationClosed[2],\r\n        duration: animationDuration / 4,\r\n        delay: animationDuration * 0.75,\r\n        ease: \"none\",\r\n      });\r\n    }\r\n  }, [isOpen]);\r\n\r\n  let colorOne = props.colorOne || \"#333\";\r\n  let colorTwo = props.colorTwo || \"#b3b3b3\";\r\n  let lengthOfBox = props.length || 3;\r\n  let heightOfBox = props.height || 2;\r\n  let widthOfBox = props.width || 3;\r\n  const basicThickness = widthOfBox ? widthOfBox / 100 : 0.05;\r\n  const ThinThickness = basicThickness * 3;\r\n  const basicInterval = 0.03;\r\n\r\n  let positionTopStart = [\r\n    0,\r\n    (heightOfBox + ThinThickness) / 2 + basicInterval * 2 + ThinThickness,\r\n    0,\r\n  ];\r\n  let positionTop2 = [\r\n    -widthOfBox / 2 - ThinThickness + basicInterval,\r\n    heightOfBox / 2 + widthOfBox / 2 + ThinThickness * 3,\r\n    0,\r\n  ];\r\n  let positionTopEnd = [\r\n    -widthOfBox - ThinThickness * 2,\r\n    (heightOfBox + ThinThickness) / 2 + basicInterval * 2 + ThinThickness,\r\n    0,\r\n  ];\r\n  let positionBottomStart = [\r\n    widthOfBox + basicInterval,\r\n    (heightOfBox + ThinThickness) / 2 + basicInterval + ThinThickness,\r\n    0,\r\n  ];\r\n  let positionBottom2 = [\r\n    ThinThickness - basicInterval + widthOfBox / 2,\r\n    heightOfBox / 2 + lengthOfBox / 2 - ThinThickness * 4 + basicInterval,\r\n    0,\r\n  ];\r\n  let positionBottomEnd = [\r\n    ThinThickness + basicInterval,\r\n    (heightOfBox + ThinThickness) / 2 + basicInterval,\r\n    0,\r\n  ];\r\n  let rotationClosed = [0, 0, 0];\r\n  let rotationBottom2 = [0, 0, -90 * (Math.PI / 180)];\r\n  let rotation2 = [0, 0, 90 * (Math.PI / 180)];\r\n  let rotationOpenedBottom = [0, 0, -180 * (Math.PI / 180)];\r\n  let rotationOpened = [0, 0, 180 * (Math.PI / 180)];\r\n\r\n  return (\r\n    <group onClick={clickHandler}>\r\n      {/* Front */}\r\n      <mesh\r\n        rotation={[0, 0, Math.PI / 2]}\r\n        position={[-(widthOfBox - basicThickness) / 2, 0, 0]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[heightOfBox, basicThickness, lengthOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n      </mesh>\r\n      {/* Back */}\r\n      <mesh\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        position={[0, 0, -(lengthOfBox - basicThickness) / 2]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, basicThickness, heightOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n      </mesh>\r\n      {/* Right */}\r\n      <mesh\r\n        rotation={[0, 0, Math.PI / 2]}\r\n        position={[(widthOfBox - basicThickness) / 2, 0, 0]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[heightOfBox, basicThickness, lengthOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n      </mesh>\r\n      {/* Left */}\r\n      <mesh\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        position={[0, 0, (lengthOfBox - basicThickness) / 2]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, basicThickness, heightOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n      </mesh>\r\n      {/* Bottom */}\r\n      <mesh\r\n        rotation={[0, 0, 0]}\r\n        position={[0, -(heightOfBox - basicThickness) / 2, 0]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, basicThickness, lengthOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n      </mesh>\r\n      {/* Outside */}\r\n      <mesh\r\n        rotation={[0, 0, 0]}\r\n        position={[0, -((heightOfBox + ThinThickness) / 2 + basicInterval), 0]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[\r\n            widthOfBox + 2 * (basicInterval + ThinThickness),\r\n            ThinThickness,\r\n            lengthOfBox,\r\n          ]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorOne} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[0, 0, Math.PI / 2]}\r\n        position={[(widthOfBox + ThinThickness) / 2 + basicInterval, 0, 0]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[\r\n            heightOfBox + 2 * (basicInterval + ThinThickness),\r\n            ThinThickness,\r\n            lengthOfBox,\r\n          ]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorOne} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[0, 0, Math.PI / 2]}\r\n        position={[\r\n          -((widthOfBox + ThinThickness) / 2 + basicInterval),\r\n          (ThinThickness + basicInterval) / 2,\r\n          0,\r\n        ]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[\r\n            heightOfBox + 3 * basicInterval + ThinThickness * 3,\r\n            ThinThickness,\r\n            lengthOfBox,\r\n          ]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorOne} />\r\n      </mesh>\r\n      {/* Top */}\r\n      <mesh\r\n        ref={TopRef2}\r\n        rotation={[0, 0, 0]}\r\n        position={[\r\n          ThinThickness + basicInterval,\r\n          (heightOfBox + ThinThickness) / 2 + basicInterval,\r\n          0,\r\n        ]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, ThinThickness, lengthOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorOne} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[0, 0, 0]}\r\n        position={[\r\n          0,\r\n          (heightOfBox + ThinThickness) / 2 + basicInterval * 2 + ThinThickness,\r\n          0,\r\n        ]}\r\n        ref={TopRef1}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[\r\n            widthOfBox + basicInterval * 2 + ThinThickness * 2,\r\n            ThinThickness,\r\n            lengthOfBox,\r\n          ]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorOne} />\r\n      </mesh>\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default Cubebox;\r\n","import { useFrame } from \"@react-three/fiber\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport gsap from \"gsap\";\r\n\r\nconst Sliderbox = (props) => {\r\n  const TopRef = useRef();\r\n  const [isClicked, setIsClicked] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const clickHandler = () => {\r\n    if (!isClicked) {\r\n      setIsClicked(true);\r\n      isOpen ? setIsOpen(false) : setIsOpen(true);\r\n      setTimeout(() => {\r\n        setIsClicked(false);\r\n      }, 100);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsOpen(false);\r\n  }, [props.length, props.height, props.width]);\r\n\r\n  const animationDuration = 0.5;\r\n\r\n  useEffect(() => {\r\n    if (!isOpen) {\r\n      gsap.to(TopRef.current.position, {\r\n        x: position[0],\r\n        y: position[1],\r\n        z: position[2],\r\n        duration: animationDuration / 2,\r\n        ease: \"power4.out\",\r\n      });\r\n    } else {\r\n      gsap.to(TopRef.current.position, {\r\n        x: positionEnd[0],\r\n        y: positionEnd[1],\r\n        z: positionEnd[2],\r\n        duration: animationDuration / 2,\r\n        ease: \"power4.out\",\r\n      });\r\n    }\r\n  }, [isOpen]);\r\n\r\n  useFrame(() => {});\r\n\r\n  let colorOne = props.colorOne || \"red\";\r\n  let colorTwo = props.colorTwo || \"#b3b3b3\";\r\n  let colorThree = props.colorThree || \"#999\";\r\n  let lengthOfBox = props.width || 3;\r\n  let heightOfBox = props.height || 2;\r\n  let widthOfBox = props.length || 3;\r\n  const basicThickness = widthOfBox ? lengthOfBox / 60 : 0.05;\r\n  const ThinThickness = basicThickness * 2;\r\n  let position = [0, 0, 0];\r\n  let positionEnd = [widthOfBox * 0.7, 0, 0];\r\n  return (\r\n    <group onClick={clickHandler}>\r\n      {/* Top */}\r\n      <group ref={TopRef}>\r\n        <mesh rotation={[0, 0, 0]} position={[widthOfBox / 2, 0, 0]}>\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[widthOfBox / 10, basicThickness / 10, lengthOfBox / 10]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorThree} />\r\n        </mesh>\r\n\r\n        {/* InsideBox */}\r\n        <mesh\r\n          rotation={[0, 0, 0]}\r\n          position={[0, -heightOfBox / 2 + ThinThickness / 2, 0]}\r\n        >\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[widthOfBox, ThinThickness, lengthOfBox]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n        </mesh>\r\n\r\n        <mesh\r\n          rotation={[0, 0, Math.PI / 2]}\r\n          position={[widthOfBox / 2 - ThinThickness / 2, 0, 0]}\r\n        >\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[heightOfBox, ThinThickness, lengthOfBox]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n        </mesh>\r\n\r\n        <mesh\r\n          rotation={[0, 0, Math.PI / 2]}\r\n          position={[-(widthOfBox / 2 - ThinThickness / 2), 0, 0]}\r\n        >\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[heightOfBox, ThinThickness, lengthOfBox]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n        </mesh>\r\n\r\n        <mesh\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n          position={[0, 0, -(lengthOfBox / 2 - ThinThickness / 2)]}\r\n        >\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[widthOfBox, ThinThickness, heightOfBox]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n        </mesh>\r\n\r\n        <mesh\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n          position={[0, 0, lengthOfBox / 2 - ThinThickness / 2]}\r\n        >\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[widthOfBox, ThinThickness, heightOfBox]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorTwo} />\r\n        </mesh>\r\n        {/* Inside */}\r\n\r\n        <mesh\r\n          rotation={[0, 0, Math.PI / 2]}\r\n          position={[\r\n            widthOfBox / 2 - ThinThickness,\r\n            -heightOfBox / 4 + ThinThickness + basicThickness / 10,\r\n            0,\r\n          ]}\r\n        >\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[\r\n              heightOfBox / 2,\r\n              basicThickness / 10,\r\n              lengthOfBox - ThinThickness * 2,\r\n            ]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorThree} />\r\n        </mesh>\r\n        <mesh\r\n          rotation={[0, 0, Math.PI / 2]}\r\n          position={[\r\n            -(widthOfBox / 2 - ThinThickness),\r\n            -heightOfBox / 4 + ThinThickness + basicThickness / 10,\r\n            0,\r\n          ]}\r\n        >\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[\r\n              heightOfBox / 2,\r\n              basicThickness / 10,\r\n              lengthOfBox - ThinThickness * 2,\r\n            ]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorThree} />\r\n        </mesh>\r\n\r\n        <mesh\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n          position={[\r\n            0,\r\n            -heightOfBox / 4 + ThinThickness + basicThickness / 10,\r\n            -(lengthOfBox / 2 - ThinThickness),\r\n          ]}\r\n        >\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[\r\n              widthOfBox - ThinThickness * 2,\r\n              basicThickness / 10,\r\n              heightOfBox / 2,\r\n            ]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorThree} />\r\n        </mesh>\r\n        <mesh\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n          position={[\r\n            0,\r\n            -heightOfBox / 4 + ThinThickness + basicThickness / 10,\r\n            lengthOfBox / 2 - ThinThickness,\r\n          ]}\r\n        >\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[\r\n              widthOfBox - ThinThickness * 2,\r\n              basicThickness / 10,\r\n              heightOfBox / 2,\r\n            ]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorThree} />\r\n        </mesh>\r\n        {/* Inside bottom */}\r\n        <mesh\r\n          rotation={[0, 0, 0]}\r\n          position={[\r\n            0,\r\n            -heightOfBox / 2 + ThinThickness + basicThickness / 20,\r\n            0,\r\n          ]}\r\n        >\r\n          <boxGeometry\r\n            attach=\"geometry\"\r\n            args={[\r\n              widthOfBox - ThinThickness * 2,\r\n              basicThickness / 10,\r\n              lengthOfBox - ThinThickness * 2,\r\n            ]}\r\n          />\r\n          <meshLambertMaterial attach=\"material\" color={colorThree} />\r\n        </mesh>\r\n      </group>\r\n      {/* Outside */}\r\n      <mesh\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        position={[0, 0, lengthOfBox / 2 + ThinThickness / 2]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, ThinThickness, heightOfBox + ThinThickness * 2]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorOne} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        position={[0, 0, -(lengthOfBox / 2 + ThinThickness / 2)]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, ThinThickness, heightOfBox + ThinThickness * 2]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorOne} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[0, 0, Math.PI / 2]}\r\n        position={[-(widthOfBox / 2 + ThinThickness / 2), 0, 0]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[\r\n            heightOfBox + ThinThickness * 2,\r\n            ThinThickness,\r\n            lengthOfBox + ThinThickness * 2,\r\n          ]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorOne} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[0, 0, 0]}\r\n        position={[0, heightOfBox / 2 + ThinThickness / 2, 0]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, ThinThickness, lengthOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorOne} />\r\n      </mesh>\r\n      <mesh\r\n        rotation={[0, 0, 0]}\r\n        position={[0, -heightOfBox / 2 - ThinThickness / 2, 0]}\r\n      >\r\n        <boxGeometry\r\n          attach=\"geometry\"\r\n          args={[widthOfBox, ThinThickness, lengthOfBox]}\r\n        />\r\n        <meshLambertMaterial attach=\"material\" color={colorOne} />\r\n      </mesh>\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default Sliderbox;\r\n","import { Canvas } from \"@react-three/fiber\";\r\nimport { OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\r\nimport classes from \"./SelectModel.module.css\";\r\nimport Cubebox from \"./Cubebox\";\r\nimport Casketbox from \"./Casketbox\";\r\nimport Sliderbox from \"./Sliderbox\";\r\n\r\nconst SelectModel = (props) => {\r\n  const colorOne = props.colorOne;\r\n  const colorTwo = props.colorTwo;\r\n  const colorThree = props.colorThree;\r\n  const width = props.width;\r\n  const height = props.height;\r\n  const length = props.length;\r\n  const autoRotate = props.autoRotate ? props.autoRotate : false;\r\n  const autoRotateSpeed = props.autoRotateSpeed ? props.autoRotateSpeed : 2;\r\n  const boxType = props.boxType ? props.boxType : \"CubeBox\";\r\n  const zoom = props.zoom ? props.zoom : 1;\r\n  const enableRotate = props.enableRotate ? props.enableRotate : false;\r\n  const enableZoom = props.enableZoom ? props.enableZoom : false;\r\n  return (\r\n    <Canvas className={classes.Canvas}>\r\n      <OrbitControls\r\n        target={[0, 0, 0]}\r\n        autoRotate={autoRotate}\r\n        autoRotateSpeed={autoRotateSpeed}\r\n        enableRotate={enableRotate}\r\n        enableZoom={enableZoom}\r\n      />\r\n      <PerspectiveCamera makeDefault position={[6, 5, 10]} zoom={zoom} />\r\n      <directionalLight position={[-2, 5, 2]} intensity={0.9} />\r\n      <ambientLight intensity={0.6} />\r\n      {boxType === \"CubeBox\" && (\r\n        <Cubebox\r\n          colorOne={colorOne}\r\n          colorTwo={colorTwo}\r\n          colorThree={colorThree}\r\n          width={width}\r\n          height={height}\r\n          length={length}\r\n        />\r\n      )}\r\n      {boxType === \"CasketBox\" && (\r\n        <Casketbox\r\n          colorOne={colorOne}\r\n          colorTwo={colorTwo}\r\n          colorThree={colorThree}\r\n          width={width}\r\n          height={height}\r\n          length={length}\r\n        />\r\n      )}\r\n      {boxType === \"SliderBox\" && (\r\n        <Sliderbox\r\n          colorOne={colorOne}\r\n          colorTwo={colorTwo}\r\n          colorThree={colorThree}\r\n          width={width}\r\n          height={height}\r\n          length={length}\r\n        />\r\n      )}\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default SelectModel;\r\n"],"names":["props","TopRef","useRef","_useState","useState","_useState2","_slicedToArray","isClicked","setIsClicked","_useState3","_useState4","isOpen","setIsOpen","useEffect","length","height","width","gsap","to","current","position","x","position2","y","z","duration","animationDuration","ease","rotation","rotation2","positionEnd","delay","rotationEnd","useFrame","colorOne","colorTwo","colorThree","lengthOfBox","heightOfBox","widthOfBox","basicThickness","ThinThickness","Math","PI","_jsxs","onClick","setTimeout","children","ref","_jsx","attach","args","color","TopRef1","TopRef2","positionTop2","positionTopEnd","rotationOpened","positionBottom2","rotationBottom2","positionBottomStart","rotationOpenedBottom","positionBottomEnd","rotationClosed","positionTopStart","basicInterval","autoRotate","autoRotateSpeed","boxType","zoom","enableRotate","enableZoom","Canvas","className","classes","OrbitControls","target","PerspectiveCamera","makeDefault","intensity","Cubebox","Casketbox","Sliderbox"],"sourceRoot":""}